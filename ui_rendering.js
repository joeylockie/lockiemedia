// ui_rendering.js
// Depends on ViewManager for UI state, AppStore for data, FeatureFlagService, ModalStateService, utils.js, etc.

// --- DOM Elements (Declarations remain the same) ---
// ... (all DOM element declarations remain the same as in ui_rendering_js_refactor_05_pomodoro_event)
let taskSidebar, sidebarToggleBtn, sidebarToggleIcon, sidebarTextElements, sidebarIconOnlyButtons, iconTooltip;
let sortByDueDateBtn, sortByPriorityBtn, sortByLabelBtn, taskSearchInput, taskList, emptyState, noMatchingTasks;
let smartViewButtonsContainer, smartViewButtons, messageBox;
let addTaskModal, modalDialogAdd, openAddModalButton, closeAddModalBtn, cancelAddModalBtn, modalTodoFormAdd;
let modalTaskInputAdd, modalDueDateInputAdd, modalTimeInputAdd, modalEstHoursAdd, modalEstMinutesAdd;
let modalPriorityInputAdd, modalLabelInputAdd, existingLabelsDatalist, modalNotesInputAdd;
let modalRemindMeAddContainer, modalRemindMeAdd, reminderOptionsAdd, modalReminderDateAdd, modalReminderTimeAdd, modalReminderEmailAdd;
let viewEditTaskModal, modalDialogViewEdit, closeViewEditModalBtn, cancelViewEditModalBtn, modalTodoFormViewEdit;
let modalViewEditTaskId, modalTaskInputViewEdit, modalDueDateInputViewEdit, modalTimeInputViewEdit;
let modalEstHoursViewEdit, modalEstMinutesViewEdit, modalPriorityInputViewEdit, modalLabelInputViewEdit;
let existingLabelsEditDatalist, modalNotesInputViewEdit, modalRemindMeViewEditContainer, modalRemindMeViewEdit;
let reminderOptionsViewEdit, modalReminderDateViewEdit, modalReminderTimeViewEdit, modalReminderEmailViewEdit;
let existingAttachmentsViewEdit;
let viewTaskDetailsModal, modalDialogViewDetails, closeViewDetailsModalBtn, closeViewDetailsSecondaryBtn;
let editFromViewModalBtn, deleteFromViewModalBtn, viewTaskText, viewTaskDueDate, viewTaskTime, viewTaskEstDuration;
let viewTaskPriority, viewTaskStatus, viewTaskLabel, viewTaskNotes, viewTaskReminderSection, viewTaskReminderStatus;
let viewTaskReminderDetails, viewTaskReminderDate, viewTaskReminderTime, viewTaskReminderEmail;
let viewTaskAttachmentsSection, viewTaskAttachmentsList;
let taskTimerSection, viewTaskTimerDisplay, viewTaskStartTimerBtn, viewTaskPauseTimerBtn, viewTaskStopTimerBtn;
let viewTaskActualDuration, timerButtonsContainer;
let manageLabelsModal, modalDialogManageLabels, closeManageLabelsModalBtn, closeManageLabelsSecondaryBtn;
let addNewLabelForm, newLabelInput, existingLabelsList;
let settingsModal, modalDialogSettings, openSettingsModalButton, closeSettingsModalBtn, closeSettingsSecondaryBtn;
let settingsClearCompletedBtn, settingsManageLabelsBtn, settingsManageRemindersBtn, settingsTaskReviewBtn;
let settingsTooltipsGuideBtn, settingsIntegrationsBtn, settingsUserAccountsBtn, settingsCollaborationBtn, settingsSyncBackupBtn;
let taskReviewModal, modalDialogTaskReview, closeTaskReviewModalBtn, closeTaskReviewSecondaryBtn, taskReviewContent;
let tooltipsGuideModal, modalDialogTooltipsGuide, closeTooltipsGuideModalBtn, closeTooltipsGuideSecondaryBtn, tooltipsGuideContent;
let testFeatureButtonContainer, testFeatureButton;
let subTasksSectionViewEdit, modalSubTaskInputViewEdit, modalAddSubTaskBtnViewEdit, modalSubTasksListViewEdit;
let subTasksSectionViewDetails, viewSubTaskProgress, modalSubTasksListViewDetails, noSubTasksMessageViewDetails;
let subTasksSectionAdd, modalSubTaskInputAdd, modalAddSubTaskBtnAdd, modalSubTasksListAdd;
let featureFlagsListContainer;
let kanbanViewToggleBtn, kanbanViewToggleBtnText, yourTasksHeading, mainContentArea;
let kanbanBoardContainer; 
let calendarViewContainer;
let pomodoroTimerPageContainer; 
let settingsManageProjectsBtn;
let manageProjectsModal, modalDialogManageProjects, closeManageProjectsModalBtn, closeManageProjectsSecondaryBtn;
let addNewProjectForm, newProjectInput, existingProjectsList;
let modalProjectSelectAdd, modalProjectSelectViewEdit;
let projectFilterContainer;
let viewTaskProject;
let taskDependenciesSectionAdd, dependsOnContainerAdd, blocksTasksContainerAdd;
let taskDependenciesSectionViewEdit, dependsOnContainerViewEdit, blocksTasksContainerViewEdit;
let viewTaskDependenciesSection, viewTaskDependsOnList, viewTaskBlocksTasksList;
let smarterSearchContainer, smarterSearchAdvancedToggleBtn, smarterSearchOptionsDiv;
let bulkActionControlsContainer, selectAllTasksCheckbox, bulkCompleteBtn, bulkDeleteBtn;
let bulkAssignProjectDropdown, bulkChangePriorityDropdown, bulkChangeLabelInput;
let pomodoroViewToggleBtnText;
let sidebarPomodoroTimerDisplay, sidebarPomodoroState, sidebarPomodoroTime, sidebarPomodoroTask;


function initializeDOMElements() { /* ... same as before ... */ 
    console.log('[DOM Init] Attempting to initialize DOM elements...');
    mainContentArea = document.querySelector('main'); kanbanViewToggleBtn = document.getElementById('kanbanViewToggleBtn'); kanbanViewToggleBtnText = document.getElementById('kanbanViewToggleBtnText'); smartViewButtonsContainer = document.getElementById('smartViewButtonsContainer'); taskSidebar = document.getElementById('taskSidebar'); sidebarToggleBtn = document.getElementById('sidebarToggleBtn'); sidebarToggleIcon = document.getElementById('sidebarToggleIcon'); sidebarTextElements = taskSidebar ? taskSidebar.querySelectorAll('.sidebar-text-content') : []; sidebarIconOnlyButtons = taskSidebar ? taskSidebar.querySelectorAll('.sidebar-button-icon-only') : []; iconTooltip = document.getElementById('iconTooltip'); sortByDueDateBtn = document.getElementById('sortByDueDateBtn'); sortByPriorityBtn = document.getElementById('sortByPriorityBtn'); sortByLabelBtn = document.getElementById('sortByLabelBtn'); taskSearchInput = document.getElementById('taskSearchInput'); taskList = document.getElementById('taskList'); emptyState = document.getElementById('emptyState'); noMatchingTasks = document.getElementById('noMatchingTasks'); smartViewButtons = smartViewButtonsContainer ? smartViewButtonsContainer.querySelectorAll('.smart-view-btn') : []; messageBox = document.getElementById('messageBox'); addTaskModal = document.getElementById('addTaskModal'); modalDialogAdd = document.getElementById('modalDialogAdd'); openAddModalButton = document.getElementById('openAddModalButton'); closeAddModalBtn = document.getElementById('closeAddModalBtn'); cancelAddModalBtn = document.getElementById('cancelAddModalBtn'); modalTodoFormAdd = document.getElementById('modalTodoFormAdd'); modalTaskInputAdd = document.getElementById('modalTaskInputAdd'); modalDueDateInputAdd = document.getElementById('modalDueDateInputAdd'); modalTimeInputAdd = document.getElementById('modalTimeInputAdd'); modalEstHoursAdd = document.getElementById('modalEstHoursAdd'); modalEstMinutesAdd = document.getElementById('modalEstMinutesAdd'); modalPriorityInputAdd = document.getElementById('modalPriorityInputAdd'); modalLabelInputAdd = document.getElementById('modalLabelInputAdd'); existingLabelsDatalist = document.getElementById('existingLabels'); modalNotesInputAdd = document.getElementById('modalNotesInputAdd'); modalRemindMeAddContainer = document.getElementById('modalRemindMeAddContainer'); modalRemindMeAdd = document.getElementById('modalRemindMeAdd'); reminderOptionsAdd = document.getElementById('reminderOptionsAdd'); modalReminderDateAdd = document.getElementById('modalReminderDateAdd'); modalReminderTimeAdd = document.getElementById('modalReminderTimeAdd'); modalReminderEmailAdd = document.getElementById('modalReminderEmailAdd'); viewEditTaskModal = document.getElementById('viewEditTaskModal'); modalDialogViewEdit = document.getElementById('modalDialogViewEdit'); closeViewEditModalBtn = document.getElementById('closeViewEditModalBtn'); cancelViewEditModalBtn = document.getElementById('cancelViewEditModalBtn'); modalTodoFormViewEdit = document.getElementById('modalTodoFormViewEdit'); modalViewEditTaskId = document.getElementById('modalViewEditTaskId'); modalTaskInputViewEdit = document.getElementById('modalTaskInputViewEdit'); modalDueDateInputViewEdit = document.getElementById('modalDueDateInputViewEdit'); modalTimeInputViewEdit = document.getElementById('modalTimeInputViewEdit'); modalEstHoursViewEdit = document.getElementById('modalEstHoursViewEdit'); modalEstMinutesViewEdit = document.getElementById('modalEstMinutesViewEdit'); modalPriorityInputViewEdit = document.getElementById('modalPriorityInputViewEdit'); modalLabelInputViewEdit = document.getElementById('modalLabelInputViewEdit'); existingLabelsEditDatalist = document.getElementById('existingLabelsEdit'); modalNotesInputViewEdit = document.getElementById('modalNotesInputViewEdit'); modalRemindMeViewEditContainer = document.getElementById('modalRemindMeViewEditContainer'); modalRemindMeViewEdit = document.getElementById('modalRemindMeViewEdit'); reminderOptionsViewEdit = document.getElementById('reminderOptionsViewEdit'); modalReminderDateViewEdit = document.getElementById('modalReminderDateViewEdit'); modalReminderTimeViewEdit = document.getElementById('modalReminderTimeViewEdit'); modalReminderEmailViewEdit = document.getElementById('modalReminderEmailViewEdit'); existingAttachmentsViewEdit = document.getElementById('existingAttachmentsViewEdit'); viewTaskDetailsModal = document.getElementById('viewTaskDetailsModal'); modalDialogViewDetails = document.getElementById('modalDialogViewDetails'); closeViewDetailsModalBtn = document.getElementById('closeViewDetailsModalBtn'); closeViewDetailsSecondaryBtn = document.getElementById('closeViewDetailsSecondaryBtn'); editFromViewModalBtn = document.getElementById('editFromViewModalBtn'); deleteFromViewModalBtn = document.getElementById('deleteFromViewModalBtn'); viewTaskText = document.getElementById('viewTaskText'); viewTaskDueDate = document.getElementById('viewTaskDueDate'); viewTaskTime = document.getElementById('viewTaskTime'); viewTaskEstDuration = document.getElementById('viewTaskEstDuration'); viewTaskPriority = document.getElementById('viewTaskPriority'); viewTaskStatus = document.getElementById('viewTaskStatus'); viewTaskLabel = document.getElementById('viewTaskLabel'); viewTaskNotes = document.getElementById('viewTaskNotes'); viewTaskReminderSection = document.getElementById('viewTaskReminderSection'); viewTaskReminderStatus = document.getElementById('viewTaskReminderStatus'); viewTaskReminderDetails = document.getElementById('viewTaskReminderDetails'); viewTaskReminderDate = document.getElementById('viewTaskReminderDate'); viewTaskReminderTime = document.getElementById('viewTaskReminderTime'); viewTaskReminderEmail = document.getElementById('viewTaskReminderEmail'); viewTaskAttachmentsSection = document.getElementById('viewTaskAttachmentsSection'); viewTaskAttachmentsList = document.getElementById('viewTaskAttachmentsList'); taskTimerSection = document.getElementById('taskTimerSection'); viewTaskTimerDisplay = document.getElementById('viewTaskTimerDisplay'); viewTaskStartTimerBtn = document.getElementById('viewTaskStartTimerBtn'); viewTaskPauseTimerBtn = document.getElementById('viewTaskPauseTimerBtn'); viewTaskStopTimerBtn = document.getElementById('viewTaskStopTimerBtn'); viewTaskActualDuration = document.getElementById('viewTaskActualDuration'); timerButtonsContainer = document.getElementById('timerButtonsContainer'); manageLabelsModal = document.getElementById('manageLabelsModal'); modalDialogManageLabels = document.getElementById('modalDialogManageLabels'); closeManageLabelsModalBtn = document.getElementById('closeManageLabelsModalBtn'); closeManageLabelsSecondaryBtn = document.getElementById('closeManageLabelsSecondaryBtn'); addNewLabelForm = document.getElementById('addNewLabelForm'); newLabelInput = document.getElementById('newLabelInput'); existingLabelsList = document.getElementById('existingLabelsList'); settingsModal = document.getElementById('settingsModal'); modalDialogSettings = document.getElementById('modalDialogSettings'); openSettingsModalButton = document.getElementById('openSettingsModalButton'); closeSettingsModalBtn = document.getElementById('closeSettingsModalBtn'); closeSettingsSecondaryBtn = document.getElementById('closeSettingsSecondaryBtn'); settingsClearCompletedBtn = document.getElementById('settingsClearCompletedBtn'); settingsManageLabelsBtn = document.getElementById('settingsManageLabelsBtn'); settingsManageRemindersBtn = document.getElementById('settingsManageRemindersBtn'); settingsTaskReviewBtn = document.getElementById('settingsTaskReviewBtn'); settingsTooltipsGuideBtn = document.getElementById('settingsTooltipsGuideBtn'); settingsIntegrationsBtn = document.getElementById('settingsIntegrationsBtn'); settingsUserAccountsBtn = document.getElementById('settingsUserAccountsBtn'); settingsCollaborationBtn = document.getElementById('settingsCollaborationBtn'); settingsSyncBackupBtn = document.getElementById('settingsSyncBackupBtn'); taskReviewModal = document.getElementById('taskReviewModal'); modalDialogTaskReview = document.getElementById('modalDialogTaskReview'); closeTaskReviewModalBtn = document.getElementById('closeTaskReviewModalBtn'); closeTaskReviewSecondaryBtn = document.getElementById('closeTaskReviewSecondaryBtn'); taskReviewContent = document.getElementById('taskReviewContent'); tooltipsGuideModal = document.getElementById('tooltipsGuideModal'); modalDialogTooltipsGuide = document.getElementById('modalDialogTooltipsGuide'); closeTooltipsGuideModalBtn = document.getElementById('closeTooltipsGuideModalBtn'); closeTooltipsGuideSecondaryBtn = document.getElementById('closeTooltipsGuideSecondaryBtn'); tooltipsGuideContent = document.getElementById('tooltipsGuideContent'); testFeatureButtonContainer = document.getElementById('testFeatureButtonContainer'); testFeatureButton = document.getElementById('testFeatureButton'); subTasksSectionViewEdit = document.getElementById('subTasksSectionViewEdit'); modalSubTaskInputViewEdit = document.getElementById('modalSubTaskInputViewEdit'); modalAddSubTaskBtnViewEdit = document.getElementById('modalAddSubTaskBtnViewEdit'); modalSubTasksListViewEdit = document.getElementById('modalSubTasksListViewEdit'); subTasksSectionViewDetails = document.getElementById('subTasksSectionViewDetails'); viewSubTaskProgress = document.getElementById('viewSubTaskProgress'); modalSubTasksListViewDetails = document.getElementById('modalSubTasksListViewDetails'); noSubTasksMessageViewDetails = document.getElementById('noSubTasksMessageViewDetails'); subTasksSectionAdd = document.getElementById('subTasksSectionAdd'); modalSubTaskInputAdd = document.getElementById('modalSubTaskInputAdd'); modalAddSubTaskBtnAdd = document.getElementById('modalAddSubTaskBtnAdd'); modalSubTasksListAdd = document.getElementById('modalSubTasksListAdd'); featureFlagsListContainer = document.getElementById('featureFlagsListContainer'); yourTasksHeading = document.getElementById('yourTasksHeading'); kanbanBoardContainer = document.getElementById('kanbanBoardContainer'); calendarViewContainer = document.getElementById('calendarViewContainer'); pomodoroTimerPageContainer = document.getElementById('pomodoroTimerPageContainer'); settingsManageProjectsBtn = document.getElementById('settingsManageProjectsBtn'); manageProjectsModal = document.getElementById('manageProjectsModal'); modalDialogManageProjects = document.getElementById('modalDialogManageProjects'); closeManageProjectsModalBtn = document.getElementById('closeManageProjectsModalBtn'); closeManageProjectsSecondaryBtn = document.getElementById('closeManageProjectsSecondaryBtn'); addNewProjectForm = document.getElementById('addNewProjectForm'); newProjectInput = document.getElementById('newProjectInput'); existingProjectsList = document.getElementById('existingProjectsList'); modalProjectSelectAdd = document.getElementById('modalProjectSelectAdd'); modalProjectSelectViewEdit = document.getElementById('modalProjectSelectViewEdit'); projectFilterContainer = document.getElementById('projectFilterContainer'); viewTaskProject = document.getElementById('viewTaskProject'); calendarViewToggleBtn = document.getElementById('calendarViewToggleBtn'); calendarViewToggleBtnText = document.getElementById('calendarViewToggleBtnText'); taskDependenciesSectionAdd = document.getElementById('taskDependenciesSectionAdd'); dependsOnContainerAdd = document.getElementById('dependsOnContainerAdd'); blocksTasksContainerAdd = document.getElementById('blocksTasksContainerAdd'); taskDependenciesSectionViewEdit = document.getElementById('taskDependenciesSectionViewEdit'); dependsOnContainerViewEdit = document.getElementById('dependsOnContainerViewEdit'); blocksTasksContainerViewEdit = document.getElementById('blocksTasksContainerViewEdit'); viewTaskDependenciesSection = document.getElementById('viewTaskDependenciesSection'); viewTaskDependsOnList = document.getElementById('viewTaskDependsOnList'); viewTaskBlocksTasksList = document.getElementById('viewTaskBlocksTasksList'); smarterSearchContainer = document.getElementById('smarterSearchContainer'); smarterSearchAdvancedToggleBtn = document.getElementById('smarterSearchAdvancedToggleBtn'); smarterSearchOptionsDiv = document.getElementById('smarterSearchOptionsDiv'); bulkActionControlsContainer = document.getElementById('bulkActionControlsContainer'); selectAllTasksCheckbox = document.getElementById('selectAllTasksCheckbox'); bulkCompleteBtn = document.getElementById('bulkCompleteBtn'); bulkDeleteBtn = document.getElementById('bulkDeleteBtn'); bulkAssignProjectDropdown = document.getElementById('bulkAssignProjectDropdown'); bulkChangePriorityDropdown = document.getElementById('bulkChangePriorityDropdown'); bulkChangeLabelInput = document.getElementById('bulkChangeLabelInput'); pomodoroViewToggleBtn = document.getElementById('pomodoroViewToggleBtn'); pomodoroViewToggleBtnText = document.getElementById('pomodoroViewToggleBtnText'); sidebarPomodoroTimerDisplay = document.getElementById('sidebarPomodoroTimerDisplay'); sidebarPomodoroState = document.getElementById('sidebarPomodoroState'); sidebarPomodoroTime = document.getElementById('sidebarPomodoroTime'); sidebarPomodoroTask = document.getElementById('sidebarPomodoroTask');
    console.log('[DOM Init] Finished initializing DOM elements.');
}

// --- UI Helper Functions ---
function showMessage(message, type = 'success') { /* ... same as before ... */ }
function populateDatalist(datalistElement) { /* ... same as before, uses AppStore.getUniqueLabels() ... */ }
function setSidebarMinimized(minimize) { /* ... same as before ... */ }
function showTooltip(element, text) { /* ... same as before, uses FeatureFlagService ... */ }
function hideTooltip() { /* ... same as before, uses AppStore for tooltipTimeout ... */ }

// --- Task Rendering ---
function refreshTaskView() { /* ... same as before, uses ViewManager, FeatureFlagService, AppStore.getTasks() ... */ }
function renderTaskListView() { /* ... same as before, uses ViewManager, AppStore.getTasks(), AppStore.getProjects(), FeatureFlagService, TaskService.getPriorityClass, utils.formatDate/Time, BulkActionService.getSelectedIds() ... */ }
function renderBulkActionControls() { /* ... same as before, uses FeatureFlagService and BulkActionService.getSelectedIds() ... */ }
function renderTaskDependenciesForViewModal(task) { /* ... same as before, uses FeatureFlagService and AppStore.getTasks() ... */ }
function renderTempSubTasksForAddModal() { /* ... same as before, uses FeatureFlagService and tempSubTasksForAddModal (local global in ui_event_handlers.js) ... */ }

function renderSubTasksForEditModal(parentId, subTasksListElement) {
    // Uses FeatureFlagService, AppStore.getTasks(), ModalStateService.getEditingTaskId()
    if (!FeatureFlagService.isFeatureEnabled('subTasksFeature') || !subTasksListElement || typeof AppStore === 'undefined' || typeof ModalStateService === 'undefined') return;
    subTasksListElement.innerHTML = '';
    const currentTasks = AppStore.getTasks();
    const parentTask = currentTasks.find(t => t.id === parentId);

    // Ensure we are rendering for the currently edited task
    if (ModalStateService.getEditingTaskId() !== parentId) { // Use ModalStateService
        console.warn("[RenderSubTasksEdit] Attempting to render sub-tasks for a task not currently being edited. ParentID:", parentId, "Actual Editing ID:", ModalStateService.getEditingTaskId());
        return; 
    }
    // ... (rest of the function as in ui_rendering_js_refactor_06_modalstate)
    if (!parentTask || !parentTask.subTasks || parentTask.subTasks.length === 0) { subTasksListElement.innerHTML = '<li class="text-slate-500 dark:text-slate-400 text-xs text-center py-2">No sub-tasks yet. Add one above!</li>'; return; }
    parentTask.subTasks.forEach(subTask => { const li = document.createElement('li'); li.className = 'flex items-center justify-between p-2 bg-slate-50 dark:bg-slate-700/50 rounded-md text-sm group'; li.dataset.subTaskId = subTask.id; const checkbox = document.createElement('input'); checkbox.type = 'checkbox'; checkbox.checked = subTask.completed; checkbox.className = 'form-checkbox h-4 w-4 text-sky-500 rounded border-slate-400 dark:border-slate-500 focus:ring-sky-400 mr-2 cursor-pointer'; checkbox.addEventListener('change', () => { if (window.AppFeatures?.SubTasks?.toggleComplete(parentId, subTask.id)) { renderSubTasksForEditModal(parentId, subTasksListElement); if (ModalStateService.getCurrentViewTaskId() === parentId && viewTaskDetailsModal && !viewTaskDetailsModal.classList.contains('hidden')) { renderSubTasksForViewModal(parentId, modalSubTasksListViewDetails, viewSubTaskProgress, noSubTasksMessageViewDetails); } if(typeof showMessage === 'function') showMessage('Sub-task status updated.', 'info'); } }); const textSpan = document.createElement('span'); textSpan.textContent = subTask.text; textSpan.className = `flex-grow break-all ${subTask.completed ? 'line-through text-slate-500 dark:text-slate-400' : 'text-slate-700 dark:text-slate-200'}`; const actionsDiv = document.createElement('div'); actionsDiv.className = 'ml-2 flex items-center opacity-0 group-hover:opacity-100 transition-opacity duration-200'; const editBtn = document.createElement('button'); editBtn.type = 'button'; editBtn.innerHTML = '<i class="fas fa-pencil-alt text-xs text-sky-500 hover:text-sky-700 dark:text-sky-400 dark:hover:text-sky-300"></i>'; editBtn.className = 'p-1'; editBtn.title = 'Edit sub-task'; editBtn.addEventListener('click', () => { const newText = prompt('Edit sub-task:', subTask.text); if (newText !== null && newText.trim() !== '') { if (window.AppFeatures?.SubTasks?.edit(parentId, subTask.id, newText.trim())) { renderSubTasksForEditModal(parentId, subTasksListElement); if (ModalStateService.getCurrentViewTaskId() === parentId && viewTaskDetailsModal && !viewTaskDetailsModal.classList.contains('hidden')) { renderSubTasksForViewModal(parentId, modalSubTasksListViewDetails, viewSubTaskProgress, noSubTasksMessageViewDetails); } if(typeof showMessage === 'function') showMessage('Sub-task updated.', 'success'); } else { if(typeof showMessage === 'function') showMessage('Failed to update sub-task.', 'error'); } } }); const deleteBtn = document.createElement('button'); deleteBtn.type = 'button'; deleteBtn.innerHTML = '<i class="fas fa-trash-alt text-xs text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"></i>'; deleteBtn.className = 'p-1'; deleteBtn.title = 'Delete sub-task'; deleteBtn.addEventListener('click', () => { if (confirm(`Are you sure you want to delete sub-task: "${subTask.text}"?`)) { if (window.AppFeatures?.SubTasks?.delete(parentId, subTask.id)) { renderSubTasksForEditModal(parentId, subTasksListElement); if (ModalStateService.getCurrentViewTaskId() === parentId && viewTaskDetailsModal && !viewTaskDetailsModal.classList.contains('hidden')) { renderSubTasksForViewModal(parentId, modalSubTasksListViewDetails, viewSubTaskProgress, noSubTasksMessageViewDetails); } if(typeof showMessage === 'function') showMessage('Sub-task deleted.', 'success'); } else { if(typeof showMessage === 'function') showMessage('Failed to delete sub-task.', 'error');} } }); actionsDiv.appendChild(editBtn); actionsDiv.appendChild(deleteBtn); li.appendChild(checkbox); li.appendChild(textSpan); li.appendChild(actionsDiv); subTasksListElement.appendChild(li); });
}

function renderSubTasksForViewModal(parentId, subTasksListElement, progressElement, noSubTasksMessageElement) {
    // Uses FeatureFlagService, AppStore.getTasks(), ModalStateService.getCurrentViewTaskId()
    if (!FeatureFlagService.isFeatureEnabled('subTasksFeature') || !subTasksListElement || !progressElement || !noSubTasksMessageElement || typeof AppStore === 'undefined' || typeof ModalStateService === 'undefined') return;
    subTasksListElement.innerHTML = '';
    const currentTasks = AppStore.getTasks();
    const parentTask = currentTasks.find(t => t.id === parentId);

    if (ModalStateService.getCurrentViewTaskId() !== parentId) { // Use ModalStateService
         console.warn("[RenderSubTasksView] Attempting to render sub-tasks for a task not currently being viewed. ParentID:", parentId, "Actual Viewing ID:", ModalStateService.getCurrentViewTaskId());
        return; 
    }
    // ... (rest of the function as in ui_rendering_js_refactor_06_modalstate)
    if (!parentTask || !parentTask.subTasks || parentTask.subTasks.length === 0) { progressElement.textContent = ''; noSubTasksMessageElement.classList.remove('hidden'); subTasksListElement.classList.add('hidden'); return; } noSubTasksMessageElement.classList.add('hidden'); subTasksListElement.classList.remove('hidden'); let completedCount = 0; parentTask.subTasks.forEach(subTask => { if (subTask.completed) completedCount++; const li = document.createElement('li'); li.className = 'flex items-center text-sm group py-1'; li.dataset.subTaskId = subTask.id; const checkbox = document.createElement('input'); checkbox.type = 'checkbox'; checkbox.checked = subTask.completed; checkbox.className = 'form-checkbox h-4 w-4 text-sky-500 rounded border-slate-400 dark:border-slate-500 focus:ring-sky-400 mr-2 cursor-pointer flex-shrink-0'; checkbox.addEventListener('change', () => { if (window.AppFeatures?.SubTasks?.toggleComplete(parentId, subTask.id)) { renderSubTasksForViewModal(parentId, subTasksListElement, progressElement, noSubTasksMessageElement); if (ModalStateService.getEditingTaskId() === parentId && viewEditTaskModal && !viewEditTaskModal.classList.contains('hidden')) { renderSubTasksForEditModal(parentId, modalSubTasksListViewEdit); } if(typeof showMessage === 'function') showMessage('Sub-task status updated.', 'info'); } }); const textSpan = document.createElement('span'); textSpan.textContent = subTask.text; textSpan.className = `flex-grow break-all ${subTask.completed ? 'line-through text-slate-500 dark:text-slate-400' : 'text-slate-700 dark:text-slate-300'}`; li.appendChild(checkbox); li.appendChild(textSpan); subTasksListElement.appendChild(li); }); progressElement.textContent = `${completedCount}/${parentTask.subTasks.length} completed`;
}

function updateSortButtonStates() { /* ... same as before, uses ViewManager.getCurrentSort() ... */ }
function updateClearCompletedButtonState() { /* ... same as before, uses AppStore.getTasks() ... */ }
function updateViewToggleButtonsState() { /* ... same as before, uses ViewManager.getCurrentTaskViewMode() and FeatureFlagService ... */ }
function updateYourTasksHeading() { /* ... same as before, uses ViewManager, FeatureFlagService, AppStore.getProjects() ... */ }
function styleInitialSmartViewButtons() { /* ... same as before, uses ViewManager.getCurrentFilter() ... */ }

function initializeUiRenderingSubscriptions() { /* ... same as before ... */ 
    if (typeof EventBus === 'undefined') { console.error("[UI Rendering] EventBus not available for subscriptions."); return; }
    EventBus.subscribe('tasksChanged', (updatedTasks) => { console.log("[UI Rendering] Event received: tasksChanged. Refreshing view."); refreshTaskView(); updateClearCompletedButtonState(); });
    EventBus.subscribe('projectsChanged', (updatedProjects) => { console.log("[UI Rendering] Event received: projectsChanged. Refreshing view."); refreshTaskView(); });
    EventBus.subscribe('uniqueProjectsChanged', (newUniqueProjects) => { console.log("[UI Rendering] Event received: uniqueProjectsChanged. Repopulating project UI."); if (window.AppFeatures?.Projects?.populateProjectFilterList) window.AppFeatures.Projects.populateProjectFilterList(); if (window.AppFeatures?.Projects?.populateProjectDropdowns) window.AppFeatures.Projects.populateProjectDropdowns(); });
    EventBus.subscribe('kanbanColumnsChanged', (updatedColumns) => { console.log("[UI Rendering] Event received: kanbanColumnsChanged."); if (ViewManager.getCurrentTaskViewMode() === 'kanban' && FeatureFlagService.isFeatureEnabled('kanbanBoardFeature')) { refreshTaskView(); } });
    EventBus.subscribe('filterChanged', (eventData) => { console.log("[UI Rendering] Event received: filterChanged. Refreshing view and heading."); refreshTaskView(); updateYourTasksHeading(); updateSortButtonStates(); });
    EventBus.subscribe('sortChanged', (newSort) => { console.log("[UI Rendering] Event received: sortChanged. Refreshing view and sort buttons."); refreshTaskView(); updateSortButtonStates(); });
    EventBus.subscribe('searchTermChanged', (newSearchTerm) => { console.log("[UI Rendering] Event received: searchTermChanged. Refreshing view."); refreshTaskView(); });
    EventBus.subscribe('viewModeChanged', (newViewMode) => { console.log("[UI Rendering] Event received: viewModeChanged. Refreshing view and UI states."); refreshTaskView(); updateViewToggleButtonsState(); updateYourTasksHeading(); });
    EventBus.subscribe('featureFlagsUpdated', (updateData) => { console.log("[UI Rendering] Event received: featureFlagsUpdated. Certain UI states might need refresh."); updateViewToggleButtonsState(); });
    EventBus.subscribe('labelsChanged', (newLabels) => { console.log("[UI Rendering] Event received: labelsChanged. Populating datalists."); if(existingLabelsDatalist) populateDatalist(existingLabelsDatalist); if(existingLabelsEditDatalist) populateDatalist(existingLabelsEditDatalist); if (manageLabelsModal && !manageLabelsModal.classList.contains('hidden') && typeof populateManageLabelsList === 'function') { populateManageLabelsList(); } });
    EventBus.subscribe('bulkSelectionChanged', (selectedIds) => { console.log("[UI Rendering] Event received: bulkSelectionChanged. Rendering controls."); renderBulkActionControls(); });
    EventBus.subscribe('pomodoroStateUpdated', (pomodoroData) => { console.log("[UI Rendering] Event received: pomodoroStateUpdated.", pomodoroData); if (window.AppFeatures?.PomodoroTimerHybrid?.updateSidebarDisplay) { window.AppFeatures.PomodoroTimerHybrid.updateSidebarDisplay(); } });
    console.log("[UI Rendering] Event subscriptions initialized.");
}
